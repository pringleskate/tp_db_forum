package main

import (
	"fmt"
	"github.com/buaazp/fasthttprouter"
	"github.com/jackc/pgx"
	"github.com/pringleskate/tp_db_forum/cmd/handlers"
	"github.com/pringleskate/tp_db_forum/internal/services"
	"github.com/pringleskate/tp_db_forum/internal/storages/databaseService"
	"github.com/pringleskate/tp_db_forum/internal/storages/forumStorage"
	"github.com/pringleskate/tp_db_forum/internal/storages/postStorage"
	"github.com/pringleskate/tp_db_forum/internal/storages/threadStorage"
	"github.com/pringleskate/tp_db_forum/internal/storages/userStorage"
	"github.com/pringleskate/tp_db_forum/internal/storages/voteStorage"
	_ "github.com/swaggo/echo-swagger/example/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/valyala/fasthttp"
	"log"
)

func main() {
	connectionString := "postgres://postgres:qwerty1221@localhost/forum?sslmode=disable"
	config, err := pgx.ParseURI(connectionString)
	if err != nil {
		fmt.Println(err)
		return
	}

	db, err := pgx.NewConnPool(
		pgx.ConnPoolConfig{
			ConnConfig:     config,
			MaxConnections: 2000,
		})

	if err != nil {
		fmt.Println(err)
		return
	}


	forums := forumStorage.NewStorage(db)
	threads := threadStorage.NewStorage(db)
	users := userStorage.NewStorage(db)
	votes := voteStorage.NewStorage(db)
	posts := postStorage.NewStorage(db)
	dbService := databaseService.NewStorage(db)

	service := services.NewService(forums, threads, users, posts, votes, dbService)

	handler := handlers.NewHandler(service, forums, users, threads, posts)
	rout := router(handler)

	err = fasthttp.ListenAndServe(":5000", redirect(rout, handler))
	if err != nil {
		log.Fatal(err)
	}
}

func redirect(router *fasthttprouter.Router, handler handlers.Handler) fasthttp.RequestHandler {
	return func(ctx *fasthttp.RequestCtx) {
		path := string(ctx.Path())
		if path == "/api/forum/create" {
			handler.ForumCreate(ctx)
			return
		}
		router.Handler(ctx)
	}
}

func router(handler handlers.Handler) *fasthttprouter.Router {
	r := fasthttprouter.New()
	r.POST("/api/user/:nickname/create", handler.UserCreate)
	r.POST("/api/forum/:slug/create", handler.ThreadCreate)
	r.GET("/api/forum/:slug/details", handler.ForumGet)
	r.GET("/api/user/:nickname/profile", handler.UserGet)
	r.POST("/api/user/:nickname/profile", handler.UserUpdate)
	r.POST("/api/thread/:slug_or_id/vote", handler.ThreadVote)
	r.GET("/api/thread/:slug_or_id/details", handler.ThreadGet)
	r.POST("/api/thread/:slug_or_id/details", handler.ThreadUpdate)
	r.GET("/api/forum/:slug/threads", handler.ForumGetThreads)
	r.POST("/api/thread/:slug_or_id/create", handler.PostsCreate)
	r.POST("/api/service/clear", handler.Clear)
	r.GET("/api/service/status", handler.Status)
	r.POST("/api/post/:id/details", handler.PostUpdate)
	r.GET("/api/post/:id/details", handler.PostGet)
	r.GET("/api/thread/:slug_or_id/posts", handler.ThreadGetPosts)
	r.GET("/api/forum/:slug/users", handler.ForumGetUsers)
	return r
}
